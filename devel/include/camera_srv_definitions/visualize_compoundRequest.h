// Generated by gencpp from file camera_srv_definitions/visualize_compoundRequest.msg
// DO NOT EDIT!


#ifndef CAMERA_SRV_DEFINITIONS_MESSAGE_VISUALIZE_COMPOUNDREQUEST_H
#define CAMERA_SRV_DEFINITIONS_MESSAGE_VISUALIZE_COMPOUNDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int32.h>

namespace camera_srv_definitions
{
template <class ContainerAllocator>
struct visualize_compoundRequest_
{
  typedef visualize_compoundRequest_<ContainerAllocator> Type;

  visualize_compoundRequest_()
    : do_ba()  {
    }
  visualize_compoundRequest_(const ContainerAllocator& _alloc)
    : do_ba(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int32_<ContainerAllocator>  _do_ba_type;
  _do_ba_type do_ba;




  typedef boost::shared_ptr< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> const> ConstPtr;

}; // struct visualize_compoundRequest_

typedef ::camera_srv_definitions::visualize_compoundRequest_<std::allocator<void> > visualize_compoundRequest;

typedef boost::shared_ptr< ::camera_srv_definitions::visualize_compoundRequest > visualize_compoundRequestPtr;
typedef boost::shared_ptr< ::camera_srv_definitions::visualize_compoundRequest const> visualize_compoundRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace camera_srv_definitions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e4836b712c6ddd8441b7c4e40288ca4";
  }

  static const char* value(const ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e4836b712c6ddd8ULL;
  static const uint64_t static_value2 = 0x441b7c4e40288ca4ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_srv_definitions/visualize_compoundRequest";
  }

  static const char* value(const ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int32 do_ba\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.do_ba);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visualize_compoundRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_srv_definitions::visualize_compoundRequest_<ContainerAllocator>& v)
  {
    s << indent << "do_ba: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.do_ba);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_SRV_DEFINITIONS_MESSAGE_VISUALIZE_COMPOUNDREQUEST_H
