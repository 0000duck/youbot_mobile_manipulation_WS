// Generated by gencpp from file classifier_srv_definitions/mv_classifyResponse.msg
// DO NOT EDIT!


#ifndef CLASSIFIER_SRV_DEFINITIONS_MESSAGE_MV_CLASSIFYRESPONSE_H
#define CLASSIFIER_SRV_DEFINITIONS_MESSAGE_MV_CLASSIFYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_perception_msgs/classification.h>
#include <geometry_msgs/Point32.h>

namespace classifier_srv_definitions
{
template <class ContainerAllocator>
struct mv_classifyResponse_
{
  typedef mv_classifyResponse_<ContainerAllocator> Type;

  mv_classifyResponse_()
    : class_results()
    , centroid()  {
    }
  mv_classifyResponse_(const ContainerAllocator& _alloc)
    : class_results(_alloc)
    , centroid(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::object_perception_msgs::classification_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_perception_msgs::classification_<ContainerAllocator> >::other >  _class_results_type;
  _class_results_type class_results;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _centroid_type;
  _centroid_type centroid;




  typedef boost::shared_ptr< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mv_classifyResponse_

typedef ::classifier_srv_definitions::mv_classifyResponse_<std::allocator<void> > mv_classifyResponse;

typedef boost::shared_ptr< ::classifier_srv_definitions::mv_classifyResponse > mv_classifyResponsePtr;
typedef boost::shared_ptr< ::classifier_srv_definitions::mv_classifyResponse const> mv_classifyResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace classifier_srv_definitions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'object_perception_msgs': ['/home/ros/catkin_ws/src/v4r_ros_wrappers/object_perception_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61b78b9d83ec117302d36db41db6bea9";
  }

  static const char* value(const ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61b78b9d83ec1173ULL;
  static const uint64_t static_value2 = 0x02d36db41db6bea9ULL;
};

template<class ContainerAllocator>
struct DataType< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "classifier_srv_definitions/mv_classifyResponse";
  }

  static const char* value(const ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
object_perception_msgs/classification[] class_results\n\
\n\
\n\
geometry_msgs/Point32[] centroid\n\
\n\
\n\
================================================================================\n\
MSG: object_perception_msgs/classification\n\
std_msgs/String[] class_type\n\
float32[] confidence\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_results);
      stream.next(m.centroid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mv_classifyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::classifier_srv_definitions::mv_classifyResponse_<ContainerAllocator>& v)
  {
    s << indent << "class_results[]" << std::endl;
    for (size_t i = 0; i < v.class_results.size(); ++i)
    {
      s << indent << "  class_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_perception_msgs::classification_<ContainerAllocator> >::stream(s, indent + "    ", v.class_results[i]);
    }
    s << indent << "centroid[]" << std::endl;
    for (size_t i = 0; i < v.centroid.size(); ++i)
    {
      s << indent << "  centroid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.centroid[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLASSIFIER_SRV_DEFINITIONS_MESSAGE_MV_CLASSIFYRESPONSE_H
