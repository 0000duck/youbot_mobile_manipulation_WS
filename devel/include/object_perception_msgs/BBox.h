// Generated by gencpp from file object_perception_msgs/BBox.msg
// DO NOT EDIT!


#ifndef OBJECT_PERCEPTION_MSGS_MESSAGE_BBOX_H
#define OBJECT_PERCEPTION_MSGS_MESSAGE_BBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace object_perception_msgs
{
template <class ContainerAllocator>
struct BBox_
{
  typedef BBox_<ContainerAllocator> Type;

  BBox_()
    : point()  {
    }
  BBox_(const ContainerAllocator& _alloc)
    : point(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _point_type;
  _point_type point;




  typedef boost::shared_ptr< ::object_perception_msgs::BBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_perception_msgs::BBox_<ContainerAllocator> const> ConstPtr;

}; // struct BBox_

typedef ::object_perception_msgs::BBox_<std::allocator<void> > BBox;

typedef boost::shared_ptr< ::object_perception_msgs::BBox > BBoxPtr;
typedef boost::shared_ptr< ::object_perception_msgs::BBox const> BBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_perception_msgs::BBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_perception_msgs::BBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'object_perception_msgs': ['/home/ros/catkin_ws/src/v4r_ros_wrappers/object_perception_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_perception_msgs::BBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_perception_msgs::BBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_perception_msgs::BBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_perception_msgs::BBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_perception_msgs::BBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_perception_msgs::BBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_perception_msgs::BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d78ec3ba0a94cecdadde51ecaf26ca2";
  }

  static const char* value(const ::object_perception_msgs::BBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d78ec3ba0a94cecULL;
  static const uint64_t static_value2 = 0xdadde51ecaf26ca2ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_perception_msgs::BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_perception_msgs/BBox";
  }

  static const char* value(const ::object_perception_msgs::BBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_perception_msgs::BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 8 points of the bounding box\n\
geometry_msgs/Point32[] point\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::object_perception_msgs::BBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_perception_msgs::BBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_perception_msgs::BBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_perception_msgs::BBox_<ContainerAllocator>& v)
  {
    s << indent << "point[]" << std::endl;
    for (size_t i = 0; i < v.point.size(); ++i)
    {
      s << indent << "  point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.point[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_PERCEPTION_MSGS_MESSAGE_BBOX_H
